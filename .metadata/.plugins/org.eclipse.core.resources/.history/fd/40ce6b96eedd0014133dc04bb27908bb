/**
 * 
 */
package com.pramati.imaginea.bObj;

import java.io.File;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import com.pramati.imaginea.Entities.MailContent;
import com.pramati.imaginea.base.WebElement;
import com.pramati.imaginea.utilities.CrawlerConstants;

/**take data from the queue and hit the url get the mail object and submit the task to executor for saving
 * @author anandu
 *
 */
public class Downloader implements Runnable{

	private BlockingQueue<WebElement> glinkQueue = null;
	private ExecutorService gThreadPool ;
	private File Directory ;
	
	/**
	 * 
	 */
	public Downloader(BlockingQueue<WebElement> queue) {
		this.glinkQueue = queue;
	}

	@Override
	public void run() {
		gThreadPool = Executors.newFixedThreadPool(CrawlerConstants.ThreadPoolSize);
		if (Directory == null) {
			System.out.println("unable to create target directory Exiting --");
			System.exit(1);
		}
		Directory.mkdir();
		WebMailLink lQueuedElement;
		try {
			while ((lQueuedElement = (WebMailLink)glinkQueue.take())!=null) {
				JAXBContext jaxbContext = JAXBContext.newInstance(MailContent.class);  
				Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();  
				MailContent email= (MailContent) jaxbUnmarshaller.unmarshal(lQueuedElement.getLinkUrl());
				gThreadPool.submit(new Saver(Directory,email));
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JAXBException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
