/**
 * 
 */
package com.pramati.imaginea.base;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * @author anandu
 *
 */
public class WebCrawlar implements Crawlar {

	private static final int DEFAULT_CRAWL_CAPACITY = 1;
	private int threshold;
	private ExecutorService threadPool;
	private BlockingQueue workQueue;
	public WebCrawlar() {
		this(DEFAULT_CRAWL_CAPACITY);
	}
	/**
	 * 
	 */
	public WebCrawlar(int capacity) {
		this.threshold = capacity;
		threadPool = Executors.newFixedThreadPool(threshold);
		workQueue = new ArrayBlockingQueue(10);
	}
	
	public void addPage(Page targetPage) throws InterruptedException {
		workQueue.put(targetPage);
	}
	/* (non-Javadoc)
	 * @see com.pramati.imaginea.base.Crawlar#crawl(com.pramati.imaginea.base.Page)
	 */
	@Override
	public void crawl() {
		
	}
	public void crawl0(Page WebPage) {
		
	}
	private class Monitor implements Runnable {
		BlockingQueue work;
		public Monitor(BlockingQueue queue) {
			this.work = queue;
		}
		@Override
		public void run() {
			
			while(true) {
				
			}
			
		}
		
	}

}
