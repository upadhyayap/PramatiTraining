/**
 * 
 */
package com.pramati.imaginea.base;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.pramati.imaginea.Exceptions.ShutDownException;

/**
 * @author anandu
 *
 */
public class WebCrawlar implements Crawlar {

	private static final int DEFAULT_CRAWL_CAPACITY = 1;
	private int threshold;
	private ExecutorService threadPool;
	private BlockingQueue<Page> work_Queue;
	private boolean shutDown_Req = false;
	public WebCrawlar() {
		this(DEFAULT_CRAWL_CAPACITY);
	}
	/**
	 * 
	 */
	public WebCrawlar(int capacity) {
		this.threshold = capacity;
		threadPool = Executors.newFixedThreadPool(threshold);
		workQueue = new ArrayBlockingQueue<Page>(threshold);
	}
	/* (non-Javadoc)
	 * @see com.pramati.imaginea.base.Crawlar#addPage(com.pramati.imaginea.base.Page)
	 */
	@Override
	public void addPage(Page targetPage) throws InterruptedException,ShutDownException {
		if(shutDown) {
			throw new ShutDownException("Crawler already shutted Down");
		}
		workQueue.put(targetPage);
	}
	/* (non-Javadoc)
	 * @see com.pramati.imaginea.base.Crawlar#crawl(com.pramati.imaginea.base.Page)
	 */
	@Override
	public void crawl() throws ShutDownException {
		if(shutDown) {
			throw new ShutDownException("Crawler already shutted Down");
		}
		new Thread(new Monitor(workQueue)).start();
	}
	private class Monitor implements Runnable {
		BlockingQueue<Page>  work;
		public Monitor(BlockingQueue<Page>  queue) {
			this.work = queue;
		}
		@Override
		public void run() {
			
			while(!shutDown) {
				try {
					threadPool.submit(new Traveller(work.take()));
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			
		}
		
	}
	private class Traveller implements Runnable {
		Page task;
		public Traveller(Page ptask) {
			this.task = ptask;
		}
		@Override
		public void run() {
			try {
				task.save();
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		}
		
	}
	@Override
	public void shutDown() throws Exception {
		shutDown = true;
		//put poison Object in work queue
		
	}
}
